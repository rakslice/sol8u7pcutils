diff '--exclude=.deps' '--exclude=*.log' -ur gimp-1.2.5.orig/plug-ins/common/papertile.c gimp-1.2.5/plug-ins/common/papertile.c
--- gimp-1.2.5.orig/plug-ins/common/papertile.c	2018-09-17 18:04:03.770081000 -0700
+++ gimp-1.2.5/plug-ins/common/papertile.c	2018-09-17 19:01:26.440494000 -0700
@@ -472,27 +472,27 @@
 overlap_RGBA (guchar       *base,
 	      const guchar *top)
 {
-  gdouble R1 = (gdouble) base[0] / 255.0;
-  gdouble G1 = (gdouble) base[1] / 255.0;
-  gdouble B1 = (gdouble) base[2] / 255.0;
-  gdouble A1 = (gdouble) base[3] / 255.0;
-  gdouble R2 = (gdouble)  top[0] / 255.0;
-  gdouble G2 = (gdouble)  top[1] / 255.0;
-  gdouble B2 = (gdouble)  top[2] / 255.0;
-  gdouble A2 = (gdouble)  top[3] / 255.0;
-  gdouble A3 = A2 + A1 * (1.0 - A2);
-  if(0.0 < A3)
+  gdouble r_one = (gdouble) base[0] / 255.0;
+  gdouble g_one = (gdouble) base[1] / 255.0;
+  gdouble b_one = (gdouble) base[2] / 255.0;
+  gdouble a_one = (gdouble) base[3] / 255.0;
+  gdouble r_two = (gdouble)  top[0] / 255.0;
+  gdouble g_two = (gdouble)  top[1] / 255.0;
+  gdouble b_two = (gdouble)  top[2] / 255.0;
+  gdouble a_two = (gdouble)  top[3] / 255.0;
+  gdouble a_three = a_two + a_one * (1.0 - a_two);
+  if(0.0 < a_three)
     {
-      gdouble R3 = (R1 * A1 * (1.0 - A2) + R2 * A2) / A3;
-      gdouble G3 = (G1 * A1 * (1.0 - A2) + G2 * A2) / A3;
-      gdouble B3 = (B1 * A1 * (1.0 - A2) + B2 * A2) / A3;
-      R3 = CLAMP (R3, 0.0, 1.0);
-      G3 = CLAMP (G3, 0.0, 1.0);
-      B3 = CLAMP (B3, 0.0, 1.0);
-      base[0] = (guchar) (R3 * 255.0);
-      base[1] = (guchar) (G3 * 255.0);
-      base[2] = (guchar) (B3 * 255.0);
-      base[3] = (guchar) (A3 * 255.0);
+      gdouble r_three = (r_one * a_one * (1.0 - a_two) + r_two * a_two) / a_three;
+      gdouble g_three = (g_one * a_one * (1.0 - a_two) + g_two * a_two) / a_three;
+      gdouble b_three = (b_one * a_one * (1.0 - a_two) + b_two * a_two) / a_three;
+      r_three = CLAMP (r_three, 0.0, 1.0);
+      g_three = CLAMP (g_three, 0.0, 1.0);
+      b_three = CLAMP (b_three, 0.0, 1.0);
+      base[0] = (guchar) (r_three * 255.0);
+      base[1] = (guchar) (g_three * 255.0);
+      base[2] = (guchar) (b_three * 255.0);
+      base[3] = (guchar) (a_three * 255.0);
     }
   else
     {
diff '--exclude=.deps' '--exclude=*.log' -ur gimp-1.2.5.orig/plug-ins/common/png.c gimp-1.2.5/plug-ins/common/png.c
--- gimp-1.2.5.orig/plug-ins/common/png.c	2018-09-17 18:04:03.740094000 -0700
+++ gimp-1.2.5/plug-ins/common/png.c	2018-09-17 19:01:26.440579000 -0700
@@ -465,7 +465,7 @@
   info = (png_infop)calloc(sizeof(png_info), 1);
 #endif /* PNG_LIBPNG_VER > 88 */
 
-  if (setjmp (pp->jmpbuf))
+  if (setjmp (png_jmpbuf(pp)))
   {
     g_message (_("%s\nPNG error. File corrupted?"), filename);
     return image;
@@ -507,15 +507,15 @@
   * Latest attempt, this should be my best yet :)
   */
 
-  if (info->bit_depth == 16) {
+  if (png_get_bit_depth(pp,info) == 16) {
     png_set_strip_16(pp);
   }
 
-  if (info->color_type == PNG_COLOR_TYPE_GRAY && info->bit_depth < 8) {
+  if (png_get_color_type(pp,info) == PNG_COLOR_TYPE_GRAY && png_get_bit_depth(pp,info) < 8) {
     png_set_expand(pp);
   }
 
-  if (info->color_type == PNG_COLOR_TYPE_PALETTE && info->bit_depth < 8) {
+  if (png_get_color_type(pp,info) == PNG_COLOR_TYPE_PALETTE && png_get_bit_depth(pp,info) < 8) {
     png_set_packing(pp);
   }
 
@@ -523,8 +523,8 @@
   * Expand G+tRNS to GA, RGB+tRNS to RGBA
   */
 
-  if (info->color_type != PNG_COLOR_TYPE_PALETTE &&
-                       (info->valid & PNG_INFO_tRNS)) {
+  if (png_get_color_type(pp,info) != PNG_COLOR_TYPE_PALETTE &&
+                       png_get_valid(pp,info,PNG_INFO_tRNS)) {
     png_set_expand(pp);
   }
 
@@ -541,7 +541,7 @@
 
 #if PNG_LIBPNG_VER > 99
   if (png_get_valid(pp, info, PNG_INFO_tRNS) &&
-      info->color_type == PNG_COLOR_TYPE_PALETTE)
+      png_get_color_type(pp,info) == PNG_COLOR_TYPE_PALETTE)
   {
     png_get_tRNS(pp, info, &alpha_ptr, &num, NULL);
     /* Copy the existing alpha values from the tRNS chunk */
@@ -564,7 +564,7 @@
 
   png_read_update_info(pp, info);
   
-  switch (info->color_type)
+  switch (png_get_color_type(pp,info))
   {
     case PNG_COLOR_TYPE_RGB :           /* RGB */
         bpp        = 3;
@@ -600,7 +600,7 @@
         return -1;
   };
 
-  image = gimp_image_new(info->width, info->height, image_type);
+  image = gimp_image_new(png_get_image_width(pp, info), png_get_image_height(pp, info), image_type);
   if (image == -1)
   {
     g_message("Can't allocate new image\n%s", filename);
@@ -611,7 +611,7 @@
   * Create the "background" layer to hold the image...
   */
 
-  layer = gimp_layer_new(image, _("Background"), info->width, info->height,
+  layer = gimp_layer_new(image, _("Background"), png_get_image_width(pp, info), png_get_image_height(pp, info),
                          layer_type, 100, GIMP_NORMAL_MODE);
   gimp_image_add_layer(image, layer, 0);
 
@@ -645,17 +645,20 @@
 
   empty= 0; /* by default assume no full transparent palette entries */
 
-  if (info->color_type & PNG_COLOR_MASK_PALETTE) {
+  if (png_get_color_type(pp,info) & PNG_COLOR_MASK_PALETTE) {
 
 #if PNG_LIBPNG_VER > 99
+    png_colorp palette;
+    int num_palette;
+    png_get_PLTE(pp, info, &palette, &num_palette);
     if (png_get_valid(pp, info, PNG_INFO_tRNS)) {
       for (empty= 0; empty < 256 && alpha[empty] == 0; ++empty);
         /* Calculates number of fully transparent "empty" entries */
 
-      gimp_image_set_cmap(image, (guchar *) (info->palette + empty),
-                          info->num_palette - empty);
+      gimp_image_set_cmap(image, (guchar *) (palette + empty),
+                          num_palette - empty);
     } else {
-      gimp_image_set_cmap(image, (guchar *)info->palette, info->num_palette);
+      gimp_image_set_cmap(image, (guchar *)palette, num_palette);
     }
 #else
     gimp_image_set_cmap(image, (guchar *)info->palette, info->num_palette);
@@ -677,11 +680,11 @@
   */
 
   tile_height = gimp_tile_height ();
-  pixel       = g_new(guchar, tile_height * info->width * bpp);
+  pixel       = g_new(guchar, tile_height * png_get_image_width(pp, info) * bpp);
   pixels      = g_new(guchar *, tile_height);
 
   for (i = 0; i < tile_height; i ++)
-    pixels[i] = pixel + info->width * info->channels * i;
+    pixels[i] = pixel + png_get_image_width(pp, info) * png_get_channels(pp, info) * i;
 
   for (pass = 0; pass < num_passes; pass ++)
   {
@@ -690,11 +693,11 @@
     */
 
     for (begin = 0, end = tile_height;
-         begin < info->height;
+         begin < png_get_image_height(pp, info);
          begin += tile_height, end += tile_height)
     {
-      if (end > info->height)
-        end = info->height;
+      if (end > png_get_image_height(pp, info))
+        end = png_get_image_height(pp, info);
 
       num = end - begin;
         
@@ -707,7 +710,7 @@
       gimp_pixel_rgn_set_rect(&pixel_rgn, pixel, 0, begin,
                               drawable->width, num);
 
-      gimp_progress_update(((double)pass + (double)end / (double)info->height) /
+      gimp_progress_update(((double)pass + (double)end / (double)png_get_image_height(pp, info)) /
                            (double)num_passes);
     };
   };
@@ -824,7 +827,7 @@
   info = (png_infop)calloc(sizeof(png_info), 1);
 #endif /* PNG_LIBPNG_VER > 88 */
 
-  if (setjmp (pp->jmpbuf))
+  if (setjmp (png_jmpbuf(pp)))
   {
     g_message (_("%s\nPNG error. Couldn't save image"), filename);
     return 0;
@@ -863,10 +866,18 @@
 
   png_set_compression_level (pp, pngvals.compression_level);
 
-  info->width          = drawable->width;
-  info->height         = drawable->height;
-  info->bit_depth      = 8;
-  info->interlace_type = pngvals.interlaced;
+  png_uint_32 width;
+  png_uint_32 height;
+  int bit_depth;
+  int color_type;
+  int interlace_method;
+  int compression_method;
+  int filter_method;
+
+  width = drawable->width;
+  height = drawable->height;
+  bit_depth = 8;
+  interlace_method = pngvals.interlaced;
 
  /* 
   * Initialise remap[]
@@ -883,31 +894,30 @@
   switch (type)
   {
     case GIMP_RGB_IMAGE :
-        info->color_type = PNG_COLOR_TYPE_RGB;
+        color_type = PNG_COLOR_TYPE_RGB;
         bpp              = 3;
         break;
     case GIMP_RGBA_IMAGE :
-        info->color_type = PNG_COLOR_TYPE_RGB_ALPHA;
+        color_type = PNG_COLOR_TYPE_RGB_ALPHA;
         bpp              = 4;
         break;
     case GIMP_GRAY_IMAGE :
-        info->color_type = PNG_COLOR_TYPE_GRAY;
+        color_type = PNG_COLOR_TYPE_GRAY;
         bpp              = 1;
         break;
     case GIMP_GRAYA_IMAGE :
-        info->color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
+        color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
         bpp              = 2;
         break;
     case GIMP_INDEXED_IMAGE :
         bpp              = 1;
-        info->color_type = PNG_COLOR_TYPE_PALETTE;
-        info->valid      |= PNG_INFO_PLTE;
-        info->palette= (png_colorp) gimp_image_get_cmap(image_ID, &num_colors);
-        info->num_palette= num_colors;
+        color_type = PNG_COLOR_TYPE_PALETTE;
+        /* info->valid      |= PNG_INFO_PLTE; */
+        png_set_PLTE(pp, info, (png_colorp) gimp_image_get_cmap(image_ID, &num_colors), num_colors);
         break;
     case GIMP_INDEXEDA_IMAGE :
         bpp              = 2;
-        info->color_type = PNG_COLOR_TYPE_PALETTE;
+        color_type = PNG_COLOR_TYPE_PALETTE;
         respin_cmap (pp, info, remap, image_ID, drawable); /* fix up transparency */
         break;
     default:
@@ -919,16 +929,22 @@
   * Fix bit depths for (possibly) smaller colormap images
   */
   
-  if (info->valid & PNG_INFO_PLTE) {
-    if (info->num_palette <= 2)
-      info->bit_depth= 1;
-    else if (info->num_palette <= 4)
-      info->bit_depth= 2;
-    else if (info->num_palette <= 16)
-      info->bit_depth= 4;
+  if (png_get_valid(pp, info, PNG_INFO_PLTE)) {
+    png_colorp palette;
+    int num_palette;
+    png_get_PLTE(pp, info, &palette, &num_palette);
+    if (num_palette <= 2)
+      bit_depth = 1;
+    else if (num_palette <= 4)
+      bit_depth = 2;
+    else if (num_palette <= 16)
+      bit_depth = 4;
     /* otherwise the default is fine */
   }
 
+  png_set_IHDR(pp, info, width, height, bit_depth, color_type, interlace_method, 
+    compression_method, filter_method);
+
   /* All this stuff is optional extras, if the user is aiming for smallest
      possible file size she can turn them all off */
 
@@ -991,7 +1007,7 @@
   * Convert unpacked pixels to packed if necessary
   */
 
-  if (info->color_type == PNG_COLOR_TYPE_PALETTE && info->bit_depth < 8)
+  if (png_get_color_type(pp,info) == PNG_COLOR_TYPE_PALETTE && png_get_bit_depth(pp,info) < 8)
     png_set_packing(pp);
 
  /*
@@ -1021,7 +1037,7 @@
         num = end - begin;
         
         gimp_pixel_rgn_get_rect (&pixel_rgn, pixel, 0, begin, drawable->width, num);
-        if (info->valid & PNG_INFO_tRNS) 
+        if (png_get_valid(pp, info, PNG_INFO_tRNS))
           {
             for (i = 0; i < num; ++i) 
               {
@@ -1036,7 +1052,7 @@
               }
             /* Forgot this case before, what if there are too many colors? */
           } 
-        else if (info->valid & PNG_INFO_PLTE && bpp == 2) 
+        else if (png_get_valid(pp, info, PNG_INFO_PLTE) && bpp == 2) 
           {
             for (i = 0; i < num; ++i) 
               {
@@ -1051,7 +1067,7 @@
         png_write_rows (pp, pixels, num);
         
         gimp_progress_update (((double)pass + (double)end /
-                    (double)info->height) / (double)num_passes);
+                    (double)png_get_image_height(pp, info)) / (double)num_passes);
       };
   };
 
